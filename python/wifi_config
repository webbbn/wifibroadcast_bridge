#!/usr/bin/env python3

import enum
import configparser
import os
import logging
import logging.handlers
import signal
import sys
import time
import pyudev as udev
import subprocess as sp

# [driver][model#] -> module name
module_name_mappings = {
    "rtl8812au": {
        "": "rtl8812au"
    },
    "rtl88xxau": {
        "": "rtl8812au"
    },
    "88XXau": {
        "": "rtl8812au"
    },
    "rtl88XXau": {
        "": "rtl8812au"
    },
    "ath9k_htc": {
        "7010": "ar7010",
        "9271": "ar9271"
    }
}

# Setup some paths based on the directory that this script was run frum.
root_dir = os.path.dirname(os.path.dirname(os.path.realpath(__file__)))

# Add the python directory to the python path
python_dir = os.path.join(root_dir, "lib/python" + str(sys.version_info.major) + \
                          "." + str(sys.version_info.minor) + "/site-packages")
sys.path.append(python_dir)

# The arguments are the config filename and the mode
if len(sys.argv) != 3 or (sys.argv[2] != "air" and sys.argv[2] != "ground"):
    sys.stderr.write("Usage: %s <config file> <mode (air|ground)>\n" % sys.argv[0])
    exit(-1)
config_filename = sys.argv[1]
mode = sys.argv[2]

udev_context = udev.Context()

def handler(signum, frame):
    """Re-read the configuration file on a SIGHUP signal"""
    if signum == signal.SIGHUP:
        logging.info("Received a SIGHUP - reloading configuration")
        net.reload_config(config_filename)

class Network(object):
    """Create and control monitor mode wifi interfaces"""

    def __init__(self):
        self.m_devices = []
        self.m_wfb_bridge_proc = None

    def read_config(self, filename):
        """ Read the configuration file """
        self.config_filename = filename
        self.m_config = configparser.ConfigParser()
        self.m_config['global'] = {
            'frequency': '2412',
            'txpower': '40',
            'bitrate': '11',
            'loglevel': 'debug',
            'syslog_level': 'debug',
            'mcs': '0',
            'stbc': '0',
            'ldpc': '0'
        }
        try:
            self.m_config.read(filename)
        except:
            logging.error("Error reading the configuration file: ", filename)
            exit

        # Configure the logger
        loglevel = getattr(logging, self.m_config['global'].get('loglevel').upper())
        syslog_level = getattr(logging, self.m_config['global'].get('syslog_level').upper())
        if not isinstance(loglevel, int):
            print("Invalid log level: %s - setting to info" % (args.loglevel))
            loglevel = logging.INFO
        if not isinstance(syslog_level, int):
            print("Invalid syslog level: %s - setting to info" % (args.syslog_level))
            syslog_level = logging.INFO
        logger = logging.getLogger('wifi_config')
        stream_handler = logging.StreamHandler()
        stream_handler.setLevel(loglevel)
        syslog_handler = logging.handlers.SysLogHandler(address = "/dev/log")
        syslog_handler.setLevel(syslog_level)
        logging.basicConfig(level=min(loglevel, syslog_level), format="%(asctime)s %(levelname)s: %(message)s",
                            datefmt="%H:%M:%S", handlers = [stream_handler, syslog_handler])

        # Configure the reload signal handler
        signal.signal(signal.SIGHUP, handler)


    def reload_config(self, filename):
        logging.debug("Reload config called")

        # Re-read the configuration file
        self.read_config(self.config_filename)

        # Re-configure all the interfaces
        self.configure_interfaces(force=True)

        # Restart the wfb_bridge process
        self.restart_processes()

    def card_type(self, device):
        """Lookup the canonical name for this wifi card"""

        driver = device.get('ID_USB_DRIVER')
        model_id = device.get('ID_MODEL_ID')
        if driver not in module_name_mappings:
            logging.debug("Unable to find name mapping for driver: %s" % (driver))
            return None
        name_list = module_name_mappings[driver]
        if model_id in name_list:
            return name_list[model_id]
        elif "" in name_list:
            return name_list[""]
        else:
            logging.debug("Unable to find name mapping for model: %s:%s" % (driver, model_id))
            return None


    def configure_interfaces(self, force=False):
        """A device has been plugged/unplugged. Configure any new interface"""

        # Configure all of them if force is True
        if force == True:
            self.m_devices = []

        # Get a list of devices to see which one(s) changed.
        devices = []
        for device in udev_context.list_devices(subsystem='net'):
            if device.device_type == 'wlan':
                devices.append(device)

        # Configure the devices that have been added
        cur_devices = []
        for device in devices:
            if device not in self.m_devices:
                if self.configure_interface(device):
                    cur_devices.append(device)
            else:
                cur_devices.append(device)

        # Update the list of configured devices
        self.m_devices = cur_devices

        # Restart the wfb_bridge process
        self.restart_processes()


    def configure_interface(self, device):
        """Configure the given card in monitor mode"""

        # Get some info about the card
        interface = device.sys_name
        driver = device.get('ID_USB_DRIVER')
        model_id = device.get('ID_MODEL_ID')
        logging.info("Attempting to configure interface: " + interface)

        # Try to load the python module for configuring this device type
        # If the module doesn't exist, the card is not supported
        module_name = self.card_type(device)
        if module_name is None:
            return False
        try:
            module = __import__('wifibroadcast', globals(), locals(), [module_name])
            submodule = getattr(module, module_name)
            class_ = getattr(submodule, module_name)
            dev = class_(interface)
        except Exception as e:
            logging.debug("Unable to load module for driver: %s:%s" % (driver, model_id))
            logging.debug(e)
            return False
        logging.info("Found driver of type: %s" % (module_name))
            
        # Retrieve the configuration file
        config_group = 'device-' + module_name
        frequency = self.m_config[config_group].getint('frequency', 0)
        if frequency == 0:
            frequency = self.m_config['global'].getint('frequency', 0)
        txpower = self.m_config[config_group].getint('txpower', 0)
        if txpower == 0:
            txpower = self.m_config['global'].getint('txpower', 0)
        bitrate = self.m_config[config_group].getfloat('bitrate', 0)
        if bitrate == 0:
            bitrate = self.m_config['global'].getfloat('bitrate', 0)
        mcs  = self.m_config[config_group].getfloat('mcs', 0)
        if mcs == 0:
            mcs = self.m_config['global'].getfloat('mcs', 0)
        stbc  = self.m_config[config_group].getfloat('stbc', 0)
        if stbc == 0:
            stbc = self.m_config['global'].getfloat('stbc', 0)
        ldpc  = self.m_config[config_group].getfloat('ldpc', 0)
        if ldpc == 0:
            ldpc = self.m_config['global'].getfloat('ldpc', 0)

        # Configure this interface
        logging.info("Configuring %s to %d and txpower=%d, bitrate=%f" %
                     (interface, frequency, txpower, bitrate))
        add = dev.configure(interface, frequency, txpower, bitrate, mcs, stbc, ldpc)
        logging.info("Configured: %s" % (interface))

        # Add this to the list of interfaces
        if add:
            self.m_devices.append(device)

        return True


    def restart_processes(self):

        # Stop the wfb_bridge subproces if it's been started
        if self.m_wfb_bridge_proc is not None:
            self.m_wfb_bridge_proc.kill()
            self.m_wfb_bridge_proc = None

        # Don't start the wfb_bridge process until we have an interface to connect to
        if len(self.m_devices) == 0:
            return

        # Add the wifi cards to the command list
        cmd = ["wfb_bridge", config_filename, mode]
        for device in self.m_devices:
            cmd .append("%s:%s" % (device.sys_name, self.card_type(device)))

        # Start the wfb_bridge process on this interface
        self.m_wfb_bridge_proc = sp.Popen(cmd)
        logging.info("Started wfb_bridge with PID: %d" % (self.m_wfb_bridge_proc.pid))

    def configure_fou(self):

        # Make sure the fou module is loaded
        try:
            os.system("modprobe fou")
        except Exception as e:
            logging.error("Error loading the fou module")
            logging.error(e)
            return False

        # Set the port numbersed based on the mode
        if mode == "ground":
            sport = 8346
            dport = 8345
            tunip = "192.168.30.1/24"
        else:
            sport = 8345
            dport = 8346
            tunip = "192.168.30.2/24"

        # Remove any existing interfaces
        try:
            os.system("ip link set down dev fou0")
        except Exception as e:
            pass
        try:
            os.system("ip link set down dev tunl0")
        except Exception as e:
            pass
        try:
            os.system("ip link del name fou0")
        except Exception as e:
            pass
        try:
            os.system("ip link del name tunl0")
        except Exception as e:
            pass
        try:
            os.system("ip fou del port " + str(sport))
        except Exception as e:
            pass

        # Create and configure the fou interface
        try:
            os.system("ip fou add port " + str(sport) + " ipproto 4")
            os.system("ip link add name fou0 type ipip remote 127.0.0.1 local 127.0.0.1 encap fou encap-sport auto encap-dport " + str(dport))
            os.system("ip link set up dev tunl0")
            os.system("ip link set up dev fou0")
            os.system("ip addr add " + tunip + " dev fou0")
            os.system("ifconfig fou0 mtu 1300")
        except Exception as e:
            logging.error("Error creating and/or configuring the fou module")
            logging.error(e)
            return False

        return True

net = Network()
net.read_config(config_filename)

# Configure any existing devices
net.configure_interfaces()

# Configure the fou interface
net.configure_fou()

# Monitor for any network adapters getting plugged in or unplugged
monitor = udev.Monitor.from_netlink(udev_context)
monitor.filter_by('net')
for device in iter(monitor.poll, None):
    net.configure_interfaces()
